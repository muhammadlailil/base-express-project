{"version":3,"sources":["../src/duration.js"],"names":["debug","clone","value","toDate","Date","dateParser","timeParser","methods","Y","M","W","D","T","H","S","parseIso","parser","iso","match","undefined","slice","filter","part","test","map","length","parseInt","applyParts","date","parts","operator","Object","keys","forEach","key","original","joinParts","range","indexOf","join","mergeParts","left","right","Set","concat","reduce","result","Math","abs","updateParts","createDuration","Error","assign","timeParts","P","freeze","toString","addTo","subtractFrom","add","duration","multiply","multiplier"],"mappings":"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","sourcesContent":["import createDebug from 'debug';\n\nconst debug = createDebug('date-duration');\n\nconst clone = value => {\n  if (typeof value === 'object' && typeof value.toDate === 'function') {\n    return value.toDate();\n  }\n\n  return new Date(+value);\n};\n\nconst dateParser = /P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?/;\n\nconst timeParser = /T(\\d+H)?(\\d+M)?(\\d+S)?/;\n\nconst methods = {\n  Y: 'FullYear',\n  M: 'Month',\n  W: 'Date',\n  D: 'Date',\n  T: {\n    H: 'UTCHours',\n    M: 'UTCMinutes',\n    S: 'UTCSeconds'\n  }\n};\n\nconst parseIso = (parser, iso) =>\n  (iso.match(parser) || [undefined])\n    .slice(1)\n    .filter(part => /^[0-9]+[A-Z]$/i.test(part))\n    .map(part => ({ [part[part.length - 1]]: parseInt(part.slice(0, -1), 10) }));\n\nconst applyParts = (date, parts, methods, operator) => {\n  Object.keys(parts).forEach(key => {\n    if (key === 'T') {\n      date = applyParts(date, parts.T, methods.T, operator);\n    } else {\n      const original = date[`get${methods[key]}`]();\n\n      const value = operator(\n        original,\n        key !== 'W' ? parts[key] : parts[key] * 7\n      );\n\n      date[`set${methods[key]}`](value);\n\n      debug(`set ${key} ${original} to ${value}: ${date}`);\n    }\n  });\n\n  return date;\n};\n\nconst joinParts = (parts, range) =>\n  Object.keys(parts || {})\n    .filter(key => range.indexOf(key) >= 0)\n    .map(key => `${parts[key]}${key}`)\n    .join('');\n\nconst mergeParts = (left, right, operator) =>\n  [...new Set(Object.keys(left).concat(Object.keys(right)))].reduce((result, key) => {\n    if (key === 'T') {\n      result[key] = mergeParts(left[key], right[key], operator);\n    } else {\n      result[key] = Math.abs(operator(left[key] || 0, right[key] || 0));\n    }\n\n    return result;\n  }, {});\n\nconst updateParts = (parts, operator) =>\n  Object.keys(parts).reduce((result, key) => {\n    if (key === 'T') {\n      result[key] = updateParts(parts[key], operator);\n    } else {\n      result[key] = operator(parts[key]);\n    }\n\n    return result;\n  }, {});\n\n/**\n * @constructor\n * @param  {string|object} iso Duration as a string (ISO 8601 notation) or object\n * @return {object} Duration\n */\nexport default function createDuration (iso) {\n  if (!iso) {\n    throw new Error('Invalid duration: no input');\n  }\n\n  let parts = {};\n\n  if (typeof iso === 'string') {\n    parts = Object.assign(\n      {},\n      ...parseIso(dateParser, iso)\n    );\n\n    const timeParts = parseIso(timeParser, iso);\n\n    if (timeParts.length > 0) {\n      Object.assign(parts, { T: Object.assign({}, ...timeParts) });\n    }\n\n    if (Object.keys(parts) <= 0) {\n      throw new Error(`Invalid duration: invalid ISO format (${iso})`);\n    }\n  } else if ('P' in iso) {\n    parts = Object.assign({}, iso.P);\n  } else {\n    throw new Error(`Invalid duration: invalid input (${iso})`);\n  }\n\n  return Object.freeze(Object.assign(\n    { P: parts },\n    {\n      /**\n       * Convert to a string in ISO 8601 notation\n       * @return {string}\n       */\n      toString: () =>\n        `P${joinParts(parts, ['Y', 'M', 'W', 'D'])}${parts.T ? `T${joinParts(parts.T, ['H', 'M', 'S'])}` : ''}`,\n      /**\n       * Add duration to a date\n       * @param  {Date} date\n       * @return {Date}\n       */\n      addTo: date =>\n        applyParts(clone(date), parts, methods, (left, right) => left + right),\n      /**\n       * Subtract duration from a date\n       * @param  {Date} date\n       * @return {Date}\n       */\n      subtractFrom: date =>\n        applyParts(clone(date), parts, methods, (left, right) => left - right),\n      /**\n       * Add (merge) two durations\n       * @param  {Duration} duration\n       * @return {Duration}\n       */\n      add: duration =>\n        createDuration({\n          P: mergeParts(parts, duration.P, (left, right) => left + right)\n        }),\n      /**\n       * Multiply parts of the duration by a number\n       * @param  {number} multiplier\n       * @return {Duration}\n       */\n      multiply: multiplier =>\n        createDuration({\n          P: updateParts(parts, value => value * multiplier)\n        })\n    }\n  ));\n}\n"],"file":"duration.js"}